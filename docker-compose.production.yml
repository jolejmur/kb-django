version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: django_crm_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-django_crm}
      POSTGRES_USER: ${POSTGRES_USER:-django_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-django_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - django_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-django_user} -d ${POSTGRES_DB:-django_crm}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: django_crm_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - django_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aplicación Django
  web:
    build: 
      context: .
      dockerfile: docker/django/Dockerfile.production
    container_name: django_crm_web
    environment:
      # Configuración de Django
      DJANGO_SETTINGS_MODULE: config.settings.production
      PRODUCTION: "true"
      
      # Base de datos
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${POSTGRES_DB:-django_crm}
      DB_USER: ${POSTGRES_USER:-django_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-django_password}
      DB_HOST: postgres
      DB_PORT: 5432
      
      # Redis
      REDIS_URL: redis://redis:6379/1
      
      # Seguridad
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS}
      
      # Superusuario
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@empresa.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # Email
      EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-true}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      
      # WhatsApp Business
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      WHATSAPP_WEBHOOK_VERIFY_TOKEN: ${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      META_APP_ID: ${META_APP_ID}
      META_APP_SECRET: ${META_APP_SECRET}
      
    volumes:
      - ./static:/app/static
      - ./media:/app/media
      - ./logs:/app/logs
    ports:
      - "${WEB_PORT:-8000}:8000"
    networks:
      - django_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo '🚀 Iniciando configuración de producción...' &&
        python scripts/production_setup.py &&
        echo '📦 Recopilando archivos estáticos...' &&
        python manage.py collectstatic --noinput &&
        echo '🔄 Iniciando servidor Gunicorn...' &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/accounts/login/"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: django_crm_nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./static:/var/www/static:ro
      - ./media:/var/www/media:ro
      - ./docker/certbot/conf:/etc/letsencrypt:ro
      - ./docker/certbot/www:/var/www/certbot:ro
    networks:
      - django_network
    depends_on:
      - web
    restart: unless-stopped

  # Certbot para certificados SSL
  certbot:
    image: certbot/certbot
    container_name: django_crm_certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Worker para tareas en background (opcional)
  worker:
    build: 
      context: .
      dockerfile: docker/django/Dockerfile.production
    container_name: django_crm_worker
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.production
      PRODUCTION: "true"
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: ${POSTGRES_DB:-django_crm}
      DB_USER: ${POSTGRES_USER:-django_user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-django_password}
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_URL: redis://redis:6379/1
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - django_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: python manage.py runworker
    deploy:
      replicas: 2

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  django_network:
    driver: bridge