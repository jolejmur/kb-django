# apps/accounts/apps.py - REEMPLAZAR COMPLETAMENTE

from django.apps import AppConfig
import os
import sys


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.accounts'
    verbose_name = 'Accounts'

    def ready(self):
        """Se ejecuta cuando la app est√° lista"""
        # Importar signals para asignaci√≥n autom√°tica de roles
        from . import signals
        
        # Solo ejecutar en el servidor de desarrollo, no en comandos
        if self.should_run_auto_setup():
            # Usar threading para evitar el warning de acceso a DB durante inicializaci√≥n
            import threading
            threading.Timer(0.1, self.setup_basic_menu_delayed).start()

    def should_run_auto_setup(self):
        """Determina si debe ejecutar la configuraci√≥n autom√°tica"""
        # Solo en el proceso principal del servidor de desarrollo
        if os.environ.get('RUN_MAIN') != 'true':
            return False

        # No ejecutar en ciertos comandos
        if len(sys.argv) > 1:
            command = sys.argv[1]
            skip_commands = [
                'migrate', 'makemigrations', 'showmigrations',
                'sqlmigrate', 'squashmigrations', 'collectstatic',
                'check', 'test', 'shell', 'dbshell', 'createsuperuser'
            ]
            if command in skip_commands:
                return False

        return True

    def setup_basic_menu_delayed(self):
        """Configura el men√∫ b√°sico con un peque√±o delay para evitar warnings"""
        try:
            from django.core.management import call_command
            from django.db import connection
            from django.db.utils import OperationalError
            from django.contrib.auth.models import Group

            # Verificar que las tablas existan
            try:
                with connection.cursor() as cursor:
                    cursor.execute("""
                                   SELECT name
                                   FROM sqlite_master
                                   WHERE type = 'table'
                                     AND name IN (
                                                  'accounts_menucategory',
                                                  'accounts_navigation',
                                                  'auth_group',
                                                  'accounts_role'
                                       );
                                   """)
                    tables = [row[0] for row in cursor.fetchall()]

                    if len(tables) >= 4:
                        # Verificar si ya existe la configuraci√≥n b√°sica (ahora son 4 grupos)
                        basic_groups = [
                            'Gesti√≥n de Categor√≠as',
                            'Gesti√≥n de M√≥dulos',
                            'Gesti√≥n de Roles',
                            'Gesti√≥n de Usuarios'
                        ]
                        existing_groups = Group.objects.filter(name__in=basic_groups)

                        if existing_groups.count() < 4:
                            print("\n" + "=" * 60)
                            print("üöÄ DJANGO CRM - CONFIGURACI√ìN AUTOM√ÅTICA")
                            print("=" * 60)
                            print("‚öôÔ∏è  Creando estructura b√°sica del sistema...")

                            # Ejecutar el comando que ya funciona bien
                            call_command('setup_default_menu', verbosity=1)

                            print("‚úÖ ¬°Sistema b√°sico configurado exitosamente!")
                            print("üì¶ Se crearon 4 grupos administrativos:")
                            print("   ‚Ä¢ Gesti√≥n de Categor√≠as")
                            print("   ‚Ä¢ Gesti√≥n de M√≥dulos")
                            print("   ‚Ä¢ Gesti√≥n de Roles")
                            print("   ‚Ä¢ Gesti√≥n de Usuarios")
                            print("üîó Navegaci√≥n del sidebar configurada")
                            print("üë§ Permisos asignados al superadmin")
                            print("üõ°Ô∏è  Rol de superadmin protegido como rol del sistema")
                            print("=" * 60)
                            print("üåü ¬°Listo para usar! Accede con tu superusuario")
                            print("=" * 60 + "\n")
                        else:
                            # Configuraci√≥n ya existe, mensaje m√°s discreto
                            print("‚úÖ Sistema CRM ya configurado - Listo para usar")

            except OperationalError:
                # Las tablas no existen (primera migraci√≥n pendiente)
                print("‚ö†Ô∏è  Base de datos no inicializada. Ejecuta 'python manage.py migrate' primero.")

        except Exception as e:
            print(f"‚ùå Error en configuraci√≥n autom√°tica: {e}")
            print("üí° Puedes ejecutar manualmente: python manage.py setup_default_menu --clean")