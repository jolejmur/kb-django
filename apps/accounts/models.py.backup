# apps/accounts/management/commands/setup_default_menu.py

from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth import get_user_model
from apps.accounts.models import MenuCategory, Navigation, Role
from django.db import IntegrityError

User = get_user_model()


class Command(BaseCommand):
    help = 'Crea la estructura de men√∫ por defecto para el sistema - SIN DUPLICADOS'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Fuerza la recreaci√≥n de categor√≠as existentes',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ Configurando estructura de men√∫ (SIN DUPLICADOS)...'))

        # 1. Crear categor√≠as por defecto
        admin_category = self.create_admin_category(options['force'])

        # 2. Crear m√≥dulos de administraci√≥n (SIN DUPLICADOS)
        self.create_admin_modules(admin_category)

        # 3. Crear otras categor√≠as b√°sicas
        self.create_other_categories(options['force'])

        # 4. Asignar todos los m√≥dulos al superadmin
        self.assign_modules_to_superadmin()

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Estructura de men√∫ configurada exitosamente (SIN DUPLICADOS)!')
        )

    def create_admin_category(self, force=False):
        """Crea la categor√≠a de Administraci√≥n del Sistema - SIN DUPLICADOS"""
        category_data = {
            'description': 'Gesti√≥n de m√≥dulos, roles, usuarios y configuraci√≥n',
            'icon': 'fas fa-cogs',
            'color': 'red',
            'order': 20,
            'is_system': True,
            'is_active': True
        }

        # USAR get_or_create para evitar duplicados
        category, created = MenuCategory.objects.get_or_create(
            name='ADMINISTRACI√ìN DEL SISTEMA',  # Campo unique
            defaults=category_data
        )

        if created:
            self.stdout.write(f"  ‚úÖ Categor√≠a creada: {category.name}")
        else:
            if force:
                for key, value in category_data.items():
                    setattr(category, key, value)
                category.save()
                self.stdout.write(f"  üîÑ Categor√≠a actualizada: {category.name}")
            else:
                self.stdout.write(f"  ‚è≠Ô∏è  Categor√≠a ya existe: {category.name} (ID: {category.id})")

        return category

    def create_admin_modules(self, admin_category):
        """Crea los m√≥dulos de administraci√≥n del sistema - SIN DUPLICADOS"""

        # Obtener content types para los permisos
        group_ct = ContentType.objects.get_for_model(Group)
        permission_ct = ContentType.objects.get_for_model(Permission)
        role_ct = ContentType.objects.get_for_model(Role)
        user_ct = ContentType.objects.get_for_model(User)
        category_ct = ContentType.objects.get_for_model(MenuCategory)
        navigation_ct = ContentType.objects.get_for_model(Navigation)

        admin_modules = [
            {
                'group_name': 'Gesti√≥n de M√≥dulos',
                'navigation': {
                    'name': 'M√≥dulos (Groups)',
                    'url': '/accounts/admin/modules/',
                    'icon': 'fas fa-cubes',
                    'order': 10,
                    'category': admin_category
                },
                'permissions': [
                    f'{group_ct.app_label}.add_group',
                    f'{group_ct.app_label}.change_group',
                    f'{group_ct.app_label}.delete_group',
                    f'{group_ct.app_label}.view_group',
                    f'{permission_ct.app_label}.view_permission',
                ]
            },
            {
                'group_name': 'Gesti√≥n de Categor√≠as',
                'navigation': {
                    'name': 'Categor√≠as del Men√∫',
                    'url': '/accounts/admin/categories/',
                    'icon': 'fas fa-folder-open',
                    'order': 20,
                    'category': admin_category
                },
                'permissions': [
                    f'{category_ct.app_label}.add_menucategory',
                    f'{category_ct.app_label}.change_menucategory',
                    f'{category_ct.app_label}.delete_menucategory',
                    f'{category_ct.app_label}.view_menucategory',
                ]
            },
            {
                'group_name': 'Gesti√≥n de Navegaci√≥n',
                'navigation': {
                    'name': 'Elementos del Men√∫',
                    'url': '/accounts/admin/navigation/',
                    'icon': 'fas fa-bars',
                    'order': 30,
                    'category': admin_category
                },
                'permissions': [
                    f'{navigation_ct.app_label}.add_navigation',
                    f'{navigation_ct.app_label}.change_navigation',
                    f'{navigation_ct.app_label}.delete_navigation',
                    f'{navigation_ct.app_label}.view_navigation',
                ]
            },
            {
                'group_name': 'Gesti√≥n de Roles',
                'navigation': {
                    'name': 'Roles de Usuario',
                    'url': '/accounts/admin/roles/',
                    'icon': 'fas fa-user-tag',
                    'order': 40,
                    'category': admin_category
                },
                'permissions': [
                    f'{role_ct.app_label}.add_role',
                    f'{role_ct.app_label}.change_role',
                    f'{role_ct.app_label}.delete_role',
                    f'{role_ct.app_label}.view_role',
                ]
            },
            {
                'group_name': 'Gesti√≥n de Usuarios',
                'navigation': {
                    'name': 'Usuarios del Sistema',
                    'url': '/accounts/admin/users/',
                    'icon': 'fas fa-users',
                    'order': 50,
                    'category': admin_category
                },
                'permissions': [
                    f'{user_ct.app_label}.add_user',
                    f'{user_ct.app_label}.change_user',
                    f'{user_ct.app_label}.delete_user',
                    f'{user_ct.app_label}.view_user',
                    f'{role_ct.app_label}.view_role',
                ]
            },
            {
                'group_name': 'Asignaci√≥n de Permisos',
                'navigation': {
                    'name': 'Asignar M√≥dulos a Roles',
                    'url': '/accounts/admin/role-assignments/',
                    'icon': 'fas fa-link',
                    'order': 60,
                    'category': admin_category
                },
                'permissions': [
                    f'{role_ct.app_label}.view_role',
                    f'{role_ct.app_label}.change_role',
                    f'{group_ct.app_label}.view_group',
                ]
            }
        ]

        for module_data in admin_modules:
            # ‚úÖ USAR get_or_create para evitar duplicados en Group
            group, group_created = Group.objects.get_or_create(
                name=module_data['group_name']  # Campo unique en auth_group
            )

            if group_created:
                self.stdout.write(f"  ‚úÖ M√≥dulo creado: {group.name}")
            else:
                self.stdout.write(f"  ‚è≠Ô∏è  M√≥dulo ya existe: {group.name} (ID: {group.id})")

            # Limpiar y asignar permisos espec√≠ficos
            permissions_to_assign = []
            for perm_codename in module_data['permissions']:
                try:
                    app_label, codename = perm_codename.split('.')
                    permission = Permission.objects.get(
                        content_type__app_label=app_label,
                        codename=codename
                    )
                    permissions_to_assign.append(permission)
                except Permission.DoesNotExist:
                    self.stdout.write(
                        self.style.WARNING(f"    ‚ö†Ô∏è  Permiso no encontrado: {perm_codename}")
                    )

            if permissions_to_assign:
                group.permissions.set(permissions_to_assign)
                self.stdout.write(f"    üìã Asignados {len(permissions_to_assign)} permisos espec√≠ficos")

            # ‚úÖ CREAR O ACTUALIZAR NAVEGACI√ìN (SIN DUPLICADOS)
            try:
                navigation, nav_created = Navigation.objects.get_or_create(
                    group=group,  # Campo unique en Navigation
                    defaults=module_data['navigation']
                )

                if nav_created:
                    self.stdout.write(f"    üîó Navegaci√≥n creada: {navigation.name}")
                else:
                    # Actualizar navegaci√≥n existente
                    for key, value in module_data['navigation'].items():
                        setattr(navigation, key, value)
                    navigation.save()
                    self.stdout.write(f"    üîÑ Navegaci√≥n actualizada: {navigation.name}")
            except IntegrityError as e:
                self.stdout.write(f"    ‚ö†Ô∏è  Error de integridad en navegaci√≥n: {e}")

    def create_other_categories(self, force=False):
        """Crea otras categor√≠as b√°sicas del sistema - SIN DUPLICADOS"""
        other_categories = [
            {
                'name': 'DASHBOARDS',
                'description': 'Panel principal de usuario',
                'icon': 'fas fa-tachometer-alt',
                'color': 'blue',
                'order': 10,
                'is_system': True
            },
            {
                'name': 'VENTAS',
                'description': 'Gesti√≥n de ventas y clientes',
                'icon': 'fas fa-chart-line',
                'color': 'green',
                'order': 30,
                'is_system': False
            },
            {
                'name': 'RECURSOS HUMANOS',
                'description': 'Gesti√≥n de empleados y n√≥minas',
                'icon': 'fas fa-users-cog',
                'color': 'purple',
                'order': 40,
                'is_system': False
            },
            {
                'name': 'REPORTES',
                'description': 'An√°lisis y reportes del sistema',
                'icon': 'fas fa-chart-bar',
                'color': 'yellow',
                'order': 50,
                'is_system': False
            }
        ]

        for cat_data in other_categories:
            # ‚úÖ USAR get_or_create para evitar duplicados
            category, created = MenuCategory.objects.get_or_create(
                name=cat_data['name'],  # Campo unique
                defaults={k: v for k, v in cat_data.items() if k != 'name'}
            )

            if created:
                self.stdout.write(f"  ‚úÖ Categor√≠a creada: {category.name}")
            elif force:
                for key, value in cat_data.items():
                    if key != 'name':  # No cambiar el nombre (es unique)
                        setattr(category, key, value)
                category.save()
                self.stdout.write(f"  üîÑ Categor√≠a actualizada: {category.name}")

    def assign_modules_to_superadmin(self):
        """Asigna todos los m√≥dulos del sistema a los superadmins - SIN DUPLICADOS"""
        superadmins = User.objects.filter(is_superuser=True)

        if not superadmins.exists():
            self.stdout.write(
                self.style.WARNING('  ‚ö†Ô∏è  No hay superadmins en el sistema')
            )
            return

        # ‚úÖ CREAR O OBTENER ROL DE SUPERADMIN (SIN DUPLICADOS)
        superadmin_role, created = Role.objects.get_or_create(
            name='Super Administrador',  # Campo unique
            defaults={
                'description': 'Acceso completo a todas las funciones del sistema'
            }
        )

        if created:
            self.stdout.write(f"  ‚úÖ Rol creado: {superadmin_role.name}")
        else:
            self.stdout.write(f"  ‚è≠Ô∏è  Rol ya existe: {superadmin_role.name} (ID: {superadmin_role.id})")

        # Asignar todos los grupos (m√≥dulos) al rol de superadmin
        all_groups = Group.objects.all()
        superadmin_role.groups.set(all_groups)

        self.stdout.write(
            f"  üì¶ Asignados {all_groups.count()} m√≥dulos al rol de superadmin"
        )

        # Asignar el rol a todos los superadmins que no tengan rol
        for superadmin in superadmins:
            if not superadmin.role:
                superadmin.role = superadmin_role
                superadmin.save()
                self.stdout.write(
                    f"  üë§ Rol asignado a superadmin: {superadmin.username}"
                )
            else:
                self.stdout.write(
                    f"  ‚è≠Ô∏è  Superadmin ya tiene rol: {superadmin.username} ({superadmin.role.name})"
                )