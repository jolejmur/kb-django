#!/usr/bin/env python3
"""
Script para arreglar permisos de roles - asignar m√≥dulos a roles existentes
"""

import os
import sys
import django

# Configurar Django
sys.path.append('/Users/jorgemucarcel/Desktop/kb-django-main')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from django.contrib.auth.models import Group
from apps.accounts.models import Role

def fix_role_permissions():
    """Asigna m√≥dulos apropiados a cada rol"""
    
    # Definir qu√© m√≥dulos debe tener cada rol
    ROLE_MODULES = {
        'Ventas': [
            'Dashboard de Ventas',
            'Gesti√≥n de Equipos',  # Solo lectura
            'Inmuebles en Venta',
            'Gesti√≥n de Leads',
            'Seguimiento Clientes',
        ],
        'Team Leader': [
            'Dashboard de Ventas',
            'Gesti√≥n de Equipos',
            'Jerarqu√≠a de Equipos',
            'Inmuebles en Venta',
            'Gesti√≥n de Leads',
            'Seguimiento Clientes',
            'Reportes de Ventas',
        ],
        'Jefe de Equipo': [
            'Dashboard de Ventas',
            'Gesti√≥n de Equipos',
            'Jerarqu√≠a de Equipos',
            'Comisiones de Venta',
            'Gesti√≥n de Proyectos Venta',
            'Inmuebles en Venta',
            'Dashboard CRM',
            'Gesti√≥n de Leads',
            'Seguimiento Clientes',
            'Reportes de Ventas',
            'Analytics de Equipos',
        ],
        'Gerente de Proyecto': [
            'Dashboard Proyectos',
            'Gesti√≥n de Proyectos',
            'Gesti√≥n de Inmuebles',
            'Ponderadores',
            'Dashboard de Ventas',
            'Gesti√≥n de Equipos',
            'Jerarqu√≠a de Equipos',
            'Comisiones de Venta',
            'Gesti√≥n de Proyectos Venta',
            'Inmuebles en Venta',
            'Dashboard CRM',
            'Reportes de Ventas',
            'Reportes de Proyectos',
            'Analytics de Equipos',
        ],
        'Registro': [
            'Gesti√≥n de Equipos',
            'Jerarqu√≠a de Equipos',
            'Gesti√≥n de Usuarios',  # Para poder crear usuarios
        ]
    }
    
    print("üîß Arreglando permisos de roles...")
    
    for role_name, module_names in ROLE_MODULES.items():
        try:
            role = Role.objects.get(name=role_name)
            print(f"\nüìã Configurando rol: {role_name}")
            
            # Limpiar m√≥dulos actuales
            role.groups.clear()
            
            # Asignar nuevos m√≥dulos
            modules_assigned = 0
            for module_name in module_names:
                try:
                    group = Group.objects.get(name=module_name)
                    role.groups.add(group)
                    modules_assigned += 1
                    print(f"  ‚úÖ {module_name}")
                except Group.DoesNotExist:
                    print(f"  ‚ùå M√≥dulo no encontrado: {module_name}")
            
            print(f"  üìä Total m√≥dulos asignados: {modules_assigned}/{len(module_names)}")
            
        except Role.DoesNotExist:
            print(f"‚ùå Rol no encontrado: {role_name}")
    
    print("\nüéØ Verificando asignaciones...")
    for role in Role.objects.all():
        modules_count = role.groups.count()
        print(f"Rol: {role.name} | M√≥dulos: {modules_count}")
        if modules_count == 0 and role.name != 'Super Admin':
            print(f"  ‚ö†Ô∏è  {role.name} no tiene m√≥dulos asignados")

if __name__ == '__main__':
    fix_role_permissions()
    print("\n‚úÖ ¬°Permisos de roles arreglados!")