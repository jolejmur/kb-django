#!/usr/bin/env python
"""
Script para crear m√≥dulos de Marketing Digital en el sidebar
"""
import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from apps.accounts.models import MenuCategory, User, Role, Navigation
from django.contrib.auth.models import Group

def main():
    print("üì± Configurando m√≥dulos de Marketing Digital...")
    
    # Crear categor√≠a para Marketing Digital
    category, created = MenuCategory.objects.get_or_create(
        name='Marketing Digital',
        defaults={
            'description': 'Gesti√≥n de campa√±as, leads y WhatsApp Business',
            'icon': 'fas fa-megaphone',
            'color': 'info',
            'order': 3,
            'is_active': True
        }
    )
    
    if created:
        print(f"‚úÖ Categor√≠a creada: {category.name}")
    else:
        print(f"‚ÑπÔ∏è  Categor√≠a ya existe: {category.name}")
    
    # Crear grupos/m√≥dulos para Marketing Digital
    modules = [
        {
            'name': 'Dashboard Marketing',
            'url': '/marketing/',
            'icon': 'fas fa-chart-pie',
            'order': 1
        },
        {
            'name': 'Configuraci√≥n Meta Business',
            'url': '/marketing/configuracion/',
            'icon': 'fab fa-meta',
            'order': 2
        },
        {
            'name': 'Gesti√≥n de Templates',
            'url': '/marketing/templates/',
            'icon': 'fas fa-file-alt',
            'order': 3
        },
        {
            'name': 'Campa√±as Facebook',
            'url': '/marketing/campa√±as-facebook/',
            'icon': 'fab fa-facebook',
            'order': 4
        },
        {
            'name': 'Gesti√≥n de Leads',
            'url': '/marketing/leads/',
            'icon': 'fas fa-user-plus',
            'order': 5
        },
        {
            'name': 'Asignaci√≥n de Leads',
            'url': '/marketing/asignacion-leads/',
            'icon': 'fas fa-user-check',
            'order': 6
        },
        {
            'name': 'Chat',
            'url': '/marketing/chat/',
            'icon': 'fas fa-comments',
            'order': 7
        },
        {
            'name': 'Supervisi√≥n de Chat',
            'url': '/marketing/supervision-chat/',
            'icon': 'fas fa-eye',
            'order': 8
        },
        {
            'name': 'Reportes Marketing',
            'url': '/marketing/reportes/',
            'icon': 'fas fa-chart-line',
            'order': 9
        },
        {
            'name': 'Integraciones',
            'url': '/marketing/integraciones/',
            'icon': 'fas fa-plug',
            'order': 10
        }
    ]
    
    created_groups = []
    for module_data in modules:
        # Crear grupo
        group, group_created = Group.objects.get_or_create(
            name=module_data['name']
        )
        
        # Crear navegaci√≥n
        navigation, nav_created = Navigation.objects.get_or_create(
            group=group,
            defaults={
                'name': module_data['name'],
                'url': module_data['url'],
                'icon': module_data['icon'],
                'order': module_data['order'],
                'category': category,
                'is_active': True
            }
        )
        
        created_groups.append(group)
        status = "‚úÖ Creado" if group_created else "‚ÑπÔ∏è  Ya existe"
        print(f"{status}: {module_data['name']}")
    
    # Crear o obtener rol de Super Admin
    super_admin_role, role_created = Role.objects.get_or_create(
        name='Super Admin',
        defaults={
            'description': 'Rol de super administrador con acceso completo',
            'is_active': True,
            'is_system': True
        }
    )
    
    if role_created:
        print(f"‚úÖ Rol creado: {super_admin_role.name}")
    else:
        print(f"‚ÑπÔ∏è  Rol ya existe: {super_admin_role.name}")
    
    # Asignar todos los grupos de Marketing Digital al rol
    for group in created_groups:
        super_admin_role.groups.add(group)
    
    # Verificar si existe el usuario admin y asignar el rol
    try:
        admin_user = User.objects.get(username='admin')
        admin_user.role = super_admin_role
        admin_user.save()
        print(f"‚úÖ Usuario admin asignado al rol: {super_admin_role.name}")
    except User.DoesNotExist:
        print("‚ö†Ô∏è  Usuario admin no encontrado. Ejecuta primero el script de reset de base de datos.")
    
    # Crear roles espec√≠ficos para Marketing Digital
    marketing_roles = [
        {
            'name': 'Marketing Manager',
            'description': 'Gestor de marketing con acceso completo a campa√±as y leads',
            'groups': [
                'Dashboard Marketing',
                'Configuraci√≥n Meta Business',
                'Gesti√≥n de Templates',
                'Campa√±as Facebook',
                'Gesti√≥n de Leads',
                'Asignaci√≥n de Leads',
                'Chat',
                'Supervisi√≥n de Chat',
                'Reportes Marketing',
                'Integraciones'
            ]
        },
        {
            'name': 'Marketing Specialist',
            'description': 'Especialista en marketing con acceso limitado',
            'groups': [
                'Dashboard Marketing',
                'Gesti√≥n de Templates',
                'Campa√±as Facebook',
                'Gesti√≥n de Leads',
                'Chat',
                'Reportes Marketing'
            ]
        },
        {
            'name': 'Content Creator',
            'description': 'Creador de contenido con acceso a templates',
            'groups': [
                'Dashboard Marketing',
                'Gesti√≥n de Templates',
                'Campa√±as Facebook'
            ]
        }
    ]
    
    print("\nüéØ Creando roles espec√≠ficos de Marketing Digital...")
    for role_data in marketing_roles:
        role, role_created = Role.objects.get_or_create(
            name=role_data['name'],
            defaults={
                'description': role_data['description'],
                'is_active': True,
                'is_system': False
            }
        )
        
        # Asignar grupos al rol
        for group_name in role_data['groups']:
            try:
                group = Group.objects.get(name=group_name)
                role.groups.add(group)
            except Group.DoesNotExist:
                print(f"‚ö†Ô∏è  Grupo no encontrado: {group_name}")
        
        status = "‚úÖ Creado" if role_created else "‚ÑπÔ∏è  Ya existe"
        print(f"{status}: {role_data['name']} - {role.groups.count()} m√≥dulos")
    
    # Crear permisos espec√≠ficos para jerarqu√≠a de equipos en Marketing
    print("\nüë• Configurando permisos para jerarqu√≠a de equipos...")
    
    # Grupos espec√≠ficos para Team Leaders en Marketing
    team_leader_marketing_groups = [
        'Dashboard Marketing',
        'Gesti√≥n de Leads',
        'Asignaci√≥n de Leads',
        'Chat',
        'Supervisi√≥n de Chat',
        'Reportes Marketing'
    ]
    
    # Grupos espec√≠ficos para Vendedores en Marketing
    vendedor_marketing_groups = [
        'Chat',
        'Reportes Marketing'
    ]
    
    # Crear roles para la jerarqu√≠a de equipos en Marketing
    jerarquia_roles = [
        {
            'name': 'Team Leader Marketing',
            'description': 'Team Leader con acceso a asignaci√≥n de leads y supervisi√≥n de chat',
            'groups': team_leader_marketing_groups
        },
        {
            'name': 'Vendedor Marketing',
            'description': 'Vendedor con acceso a chat y reportes b√°sicos',
            'groups': vendedor_marketing_groups
        }
    ]
    
    for role_data in jerarquia_roles:
        role, role_created = Role.objects.get_or_create(
            name=role_data['name'],
            defaults={
                'description': role_data['description'],
                'is_active': True,
                'is_system': False
            }
        )
        
        # Asignar grupos al rol
        for group_name in role_data['groups']:
            try:
                group = Group.objects.get(name=group_name)
                role.groups.add(group)
            except Group.DoesNotExist:
                print(f"‚ö†Ô∏è  Grupo no encontrado: {group_name}")
        
        status = "‚úÖ Creado" if role_created else "‚ÑπÔ∏è  Ya existe"
        print(f"{status}: {role_data['name']} - {role.groups.count()} m√≥dulos")
    
    print(f"\nüéâ Configuraci√≥n completada:")
    print(f"   - Categor√≠a: {category.name}")
    print(f"   - M√≥dulos creados: {len(created_groups)}")
    print(f"   - Rol Super Admin: {super_admin_role.name}")
    print(f"   - Total grupos asignados al Super Admin: {super_admin_role.groups.count()}")
    print(f"   - Roles espec√≠ficos creados: {len(marketing_roles) + len(jerarquia_roles)}")
    
    print(f"\nüìã M√≥dulos creados:")
    for module in modules:
        print(f"   ‚Ä¢ {module['name']} ({module['url']})")
    
    print(f"\nüîê Roles espec√≠ficos:")
    for role in marketing_roles + jerarquia_roles:
        print(f"   ‚Ä¢ {role['name']}")
    
    print(f"\nüéØ M√≥dulos espec√≠ficos para Team Leaders:")
    print(f"   ‚Ä¢ Asignaci√≥n de Leads: donde los team leaders asignan leads a sus vendedores")
    print(f"   ‚Ä¢ Supervisi√≥n de Chat: donde pueden ver los chats de todos sus subalternos")
    
    print(f"\n‚ú® Cambios implementados:")
    print(f"   ‚Ä¢ Campa√±as WhatsApp ‚Üí Campa√±as Facebook")
    print(f"   ‚Ä¢ Conversaciones ‚Üí Chat")
    print(f"   ‚Ä¢ Agregado: Asignaci√≥n de Leads")
    print(f"   ‚Ä¢ Agregado: Supervisi√≥n de Chat")

if __name__ == "__main__":
    main()